<?php

/**
 * @file
 * Edit Unpublished module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_node_access().
 */
function unpublished_permissions_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $type = $node->bundle();

  switch ($op) {

    case 'view':
      if ($account->hasPermission('view any ' . $type . ' unpublished content', $account) || $account->hasPermission('view unpublished permissions', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('edit own ' . $type . ' content', $account) && ($account->id() == $node->getOwnerId()))
          ->cachePerPermissions()
          ->cachePerUser()
          ->addCacheableDependency($node);
      }
    case 'update':
      if ($account->hasPermission('edit any ' . $type . ' unpublished content', $account) || $account->hasPermission('edit unpublished permissions', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('edit own ' . $type . ' content', $account) && ($account->id() == $node->getOwnerId()))
          ->cachePerPermissions()
          ->cachePerUser()
          ->addCacheableDependency($node);
      }
    case 'delete':
      if ($account->hasPermission('delete any ' . $type . ' unpublished content', $account) || $account->hasPermission('delete unpublished permissions', $account)) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('delete own ' . $type . ' content', $account) && ($account->id() == $node->getOwnerId()))
          ->cachePerPermissions()
          ->cachePerUser()
          ->addCacheableDependency($node);
      }
    default:
      // No opinion.
      return AccessResult::neutral();
  }
}
